// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  refresh_token_expires_in Int?
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  reports         ScanReport[]
  userBillingInfo    UserBillingInfo?

  @@map("users")
}


model UserBillingInfo {
    id              String      @id @default(cuid())

    // User Info
    userId          String      @unique
    stripeCustomerId String     @unique

    // Subscription Info
    plan            String?
    
    // Relations
    user            User @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Time
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    
    @@map("userBillingInfos")
}


model IPProfile {
    id              String      @id @default(cuid())

    ipAddress       String      @unique
    version         String

    // Relations
    reports         IPProfileOnScanReport[]
    ipProfileDetails    IPProfileDetails?

    // Time
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    @@map("ipProfiles")
}

model IPProfileDetails {
    id              String      @id @default(cuid())

    // Details
    countryCode    String?

    privateAddress         Boolean
    

    // Relations
    ipProfileId     String      @unique
    ipProfile       IPProfile @relation(fields: [ipProfileId], references: [id], onDelete: Cascade)

    // Time
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    @@map("ipProfileDetails")
}

model IPProfileOnScanReport {
    ipProfileId     String
    reportId        String      

    ipProfile       IPProfile @relation(fields: [ipProfileId], references: [id], onDelete: Cascade)
    report          ScanReport @relation(fields: [reportId], references: [id], onDelete: Cascade)


    @@id([ipProfileId, reportId])
}

model ScanReport {
    id              String      @id @default(cuid())

    // Owner User Info
    ownerId         String
    owner           User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)

    // Relations
    ipProfiles      IPProfileOnScanReport[]

    // Time
    expiresAt       DateTime
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

}
