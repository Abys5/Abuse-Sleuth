// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  
}


model User {
    id              String      @id @default(cuid())

    // User Info
    username        String      @unique
    name            String?
    image           String?
    

    // Authentication
    email           String       @unique
    emailVerified   DateTime?
    password        String

    twoFactorSecret String?
    twoFactorEnabled Boolean @default(false)

    // Relations
    reports         Report[]
    userPaymentPlan    UserPaymentPlan?

    // Time
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    @@map("users")
}

model UserPaymentPlan {
    id              String      @id @default(cuid())

    // User Info
    userId          String      @unique
    stripeCustomerId String     @unique

    // Subscription Info
    plan            String?
    
    // Relations
    user            User @relation(fields: [userId], references: [id])

    // Time
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    
    @@map("userPaymentPlans")
}


model IPProfile {
    id              String      @id @default(cuid())

    ipAddress       String      @unique
    countryCode     String?

    // Relations
    reports         IPProfileOnReport[]

    // Time
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    @@map("ipProfiles")
}

model IPProfileOnReport {
    ipProfileId     String
    reportId        String      

    ipProfile       IPProfile @relation(fields: [ipProfileId], references: [id], onDelete: Cascade)
    report          Report @relation(fields: [reportId], references: [id], onDelete: Cascade)


    @@id([ipProfileId, reportId])
}

model Report {
    id              String      @id @default(cuid())

    // Owner User Info
    ownerId         String
    owner           User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)

    // Relations
    ipProfiles      IPProfileOnReport[]

    // Time
    expiresAt       DateTime
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    @@map("reports")
}
